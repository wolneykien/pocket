#!/bin/sh -efu
#
# Copyright (C) 2015  Paul Wolneykien <manowar@altlinux.org>
# Copyright (C) 2015  STC Metrotek [http://metrotek.spb.ru/]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PROG="${PROG:-${0##*/}}"
PROG_VERSION="0.2.13"
PROG_PATH="${0%/*}"

. "$PROG_PATH/pocket-functions.sh"
load_config
POCKETDIR="${POCKETDIR:-$DEFPOCKETDIR}"

MAKE="${MAKE:-make}"

show_help() {
    cat <<EOF
Usage: $PROG [ options ] [ACTION] [action arguments ...]

$PROG invokes the specified Pocketfile action or one of the
built in pseudo-actions. Without an action specified invokes
the default Pocketfile action or shows this help page if
Pocketfile doesn't exist. The actiion arguments (i.e.
\`VAR=VALUE\` pairs are passed to the Pocketfile as is.

Use \`$PROG init\` to initialize the empty pocket and
\`$PROG init --help\` for its usage information. After a pocket is
initialized use `pocket help` and `pocket doc` to get the help and
documentation.

Options:

  -C POCKETDIR, --dir=POCKETDIR     the pocket directory containing
                                    a Pocketfile; the default is
                 ~/pocket; can also be specified via the POCKETDIR
                 environment variable;

  -a <arch>, --arch=<arch>    supply the \`ARCH=<arch>\` Pocketfile
                              parameter;

  -t <cross-arch>,
  --target=<cross-arch>       supply the \`TARGET=<cross-arch>\`
                              Pocketfile parameter;

  -N, --network    supply the \`SHARE_NETWORK=yes\` Pocketfile
                   parameter;

  -r NAME, --repo=NAME        override the repository name;

  -q, --quiet    suppress output;

  -w, --print-dirs  print directory walk as in normal \`make\`;

  -d, --debug    turn on the debugging output;

  --deep-debug   equvalent of double \`-d\` option, turns on the
                 internal rule debugging;

  -n, --dry-run  print the commands that would be executed, but do
                 not execute them;

  -j --jobs <number>    limit number of processors to use for build process;                 

  -h, --help     show this help page and exit;

  -V, --version  print the program version information and exit.


Pseudo-actions:

  init [args]  invokes the pocket-init util with arguments specified;
               invoke \`$PROG init --help\` to get its usage
               information.

Action wrappers:

  install <packages...>    invokes the Pocketfile \`install\` action
                           with the specified list of packages
                           as PKGS=<packages...>;

  install-check <package>  invokes the Pocketfile \`install-check\`
                           action with the specified package
                           as PKG=<package>;

  rebuild <package>        invokes the Pocketfile \`rebuild\` action
                           with the specified package name
                           as PKG=<package>;

  help [subject]    invokes the Pocketfile \`help\` action with the
                    subject as SUBJ=<subject> if specified;

  doc [subject]     same as the above but invokes the \`doc\` action;

  sync-in [-o|--over|-c|--compose] <from>  invokes the Pocketfile
                                          \`sync-in\` action with
                    <from> directory path as FROM=<from>; the
                    \`-o|--over\` option corresponds to the
                    \`OVER=yes\` parameter; the \`-c|--compose\`
                    option corresponds to the \`COMPOSE=yes\`
                    parameter;

  sync-out <to>     complementary to the above action supplying <to>
                    directory as TO=<to>;

  copy-results <to>   copy result files (packages) to specified directory <to>
                      directory as TO=<to>;

  shell [--rooter] [ -- command... ] invokes the Pocketfile \`shell\`
                                     action; the option \`--rooter\`
                              passes \`ROLE=rooter\` parameter;
                              all arguments after the \`--\`
                              delimiter are passed via the
                              \`CMD=<command>\` parameter;

  install-shell [--rooter] [ -- command... ] same as the above but
                                             for the \`install-shell\`
                                             Pocketfile action.

EOF
    exit 0
}


## Argument parsing

quote()
{
    printf '%s\n' "$*" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'
}

myargs=
while [ $# -gt 0 ]; do
    case "$1" in
        -C|--dir|-a|--arch|-t|--target|-r|--repo|-j|-jobs)
            if [ $# -le 1 ]; then
                show_usage
                exit 1
            fi
            myargs="${myargs} $1 \"$(quote "$2")\""
            shift
            ;;
        -*)
            myargs="${myargs} \"$(quote "$1")\""
            ;;
        *)
            break
            ;;
    esac
    shift
done

OPTS=`eval "getopt -n \"$PROG\" -o C:,a:,t:,r:,j:,N,q,w,d,n,h,V -l dir:,arch:,target:,repo:,jobs:,network,quiet,print-dirs,debug,deep-debug,dry-run,help,version -- $myargs"` || ( ret=$?; show_usage; exit $ret ) >&2

dir=; quiet=; printdirs=; debug=; dry=; arch=; target=; network=; reponame=; cpucnt=

argparse() {
    while :; do
        case "$1" in
            -C|--dir)
                shift
                POCKETDIR="$1"
                ;;
            -a|--arch) shift; arch="$1";;
            -t|--target) shift; target="$1";;
            -r|--repo) shift; reponame="$1";;
            -N|--network) network=-n;;
            -q|--quiet) quiet=-q;;
            -w|--print-dirs) printdirs=-w;;
            -j|--jobs) shift; cpucnt="$1";;
            -d|--debug)
                [ -n "$debug" ] || debug=0
            debug=$((debug + 1))
            ;;
            --deep-debug)
                [ ${debug:-0} -gt 1 ] || debug=2
                ;;
            -n|--dry-run) dry=-n;;
            -V|--version) print_version; exit 0;;
            -h|--help) show_help;;
            --) shift; break;;
            *)
                write_error 'Unrecognized option: %s\n' "$1"
                show_usage
                exit 1
                ;;
        esac
        shift
    done
}

eval "argparse $OPTS"


## Functions

do_invoke()
{
    local normal=
    [ ${debug:-0} -gt 0 ] || normal=1
    local deep=
    [ ${debug:-0} -le 1 ] || deep=1

    "$MAKE" ${printdirs:---no-print-directory} -r ${normal:+-s} \
            ${deep:+-d} ${dry:+-n} \
            -C "${POCKETDIR%/}" -f "$POCKETFILE" \
        "$@" ${debug:+DEBUG=yes} \
             ${arch:+ARCH="$arch"} \
             ${target:+TARGET="$target"} \
             ${network:+SHARE_NETWORK=yes} \
             ${reponame:+OUTNAME="$reponame"} \
             ${cpucnt:+CPUCNT="$cpucnt"}
}

invoke()
{
    if [ -n "$quiet" ]; then
        do_invoke "$@" >/dev/null
    else
        do_invoke "$@"
    fi
}

getdir()
{
    local dir="${1:-}"
    if [ -n "$dir" ]; then
        case "$dir" in
            /*)
                ;;
            *)
                dir="$(pwd)/$dir"
                ;;
        esac
    fi
    
    echo "$dir"
}


## Main

action=
if [ $# -gt 0 ]; then
    action="$1"; shift
fi

if [ -z "$action" ]; then
    if [ -e "${POCKETDIR%/}/$POCKETFILE" ]; then
        invoke "$@"
    else
        show_help
    fi
else
    case "$action" in
        install|install-check)
            params=; pkgs=
            for a in "$@"; do
                case "$a" in
                    *=*)
                        name="${a%%=*}"
                        val="${a#*=}"
                        
                        if echo "$name" | grep -q '^[A-Z_0-9]\+$'; then
                            [ -z "$params" ] || params="$params "
                            params="${params}$name=\"$(quote "$val")\""
                        else
                            [ -z "$pkgs" ] || pkgs="$pkgs "
                            pkgs="${pkgs}$a"
                        fi
                        ;;
                    *)
                        [ -z "$pkgs" ] || pkgs="$pkgs "
                        pkgs="${pkgs}$a"
                        ;;
                esac
            done

            [ -n "$pkgs" ] || fatal 'No packages specified\n'

            case "$action" in
                install)
                    eval "invoke 'install' PKGS=\"$(quote "$pkgs")\" $params"
                    ;;
                install-check)
                    eval "invoke 'install-check' PKG=\"$(quote "$pkgs")\" $params"
                    ;;
            esac
            ;;
        rebuild)
            if [ $# -gt 0 ]; then
                pkg="$1"; shift
                invoke 'rebuild' PKG="$pkg" "$@"
            else
                fatal 'Source package name is not specified\n'
            fi
            ;;
        help|doc)
            normal=
            [ ${debug:-0} -gt 0 ] || normal=1
            if [ $# -gt 0 ]; then
                subj="$1"; shift
                invoke "$action" SUBJ="$subj" "$@"
            else
                invoke "$action" "$@"
            fi
            ;;
        sync-in)
            OPTS=`getopt -n "$PROG $action" -o o,c -l over,compose -- "$@"` || ( ret=$?; show_usage; exit $ret ) >&2
            eval set -- "$OPTS"

            over=; compose=
            while :; do
                case "$1" in
                    -o|--over) over=-o;;
                    -c|--compose) compose=-c;;
                    --) shift; break;;
                    *)
                        write_error 'Unrecognized option: %s\n' "$1"
                        show_usage
                        exit 1
                        ;;
                esac
                shift
            done
            
            dir=
            if [ $# -gt 0 ]; then
                dir="$(getdir "$1")"
                shift
            fi
            [ -n "$dir" ] || \
                fatal 'Source directory is not specified\n'

            invoke 'sync-in' FROM="$dir" "$@" \
                ${over:+OVER=yes} ${compose:+COMPOSE=yes}
            ;;
        sync-out)
            dir=
            if [ $# -gt 0 ]; then
                dir="$(getdir "$1")"
                shift
            fi
            [ -n "$dir" ] || \
                fatal 'Destination directory is not specified\n'
            invoke 'sync-out' TO="$dir" "$@"
            ;;
        copy-results)
            dir=
            if [ $# -gt 0 ]; then
                dir="$(getdir "$1")"
                shift
            fi
            [ -n "$dir" ] || \
                fatal 'Destination directory is not specified\n'
            invoke 'copy-results' TO="$dir" "$@"
            ;;
        shell|install-shell)
            role=; params=; cmd=
            while [ $# -gt 0 ]; do
                case "$1" in
                    --rooter)
                        role='rooter'
                        ;;
                    --)
                        shift
                        cmd="$*"
                        break
                        ;;
                    *=*)
                        name="${1%%=*}"
                        val="${1#*=}"
                        [ -z "$params" ] || params="$params "
                        params="${params}$name=\"$(quote "$val")\""
                        ;;
                    *)
                        write_error 'Unrecognized option: %s\n' "$1"
                        show_usage
                        exit 1
                        ;;
                esac
                shift
            done
            
            if [ -n "$cmd" ]; then
                eval "invoke \"$action\" $params ${role:+ROLE=\"$role\"} CMD=\"$(quote "$cmd")\""
            else
                eval "invoke \"$action\" $params ${role:+ROLE=\"$role\"}"
            fi
            ;;
        init)
            "$PROG_PATH/pocket-init" "$POCKETDIR" "$@"
            ;;
        *)
            invoke "$action" "$@"
            ;;
    esac
fi

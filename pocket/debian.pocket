#
# Copyright (C) 2015  Paul Wolneykien <manowar@altlinux.org>
# Copyright (C) 2015  STC Metrotek [http://metrotek.spb.ru/]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Constants
# ---------

# Pocket flavour and version:
POCKET_FLAVOUR = debian
POCKET_VERSION = 0.2.11.6


# Customization section
# ---------------------

# Shell debuggins options:
SHOPTS = $(if $(DEBUG),x)

# Subconfig number:
NUM =

# Architecture
ARCH =

# The list of the pocket components:
COMPONENTS =

# hasher-priv directory:
HSHPRIVDIR = /usr/lib/hasher-priv

# system resolv.conf file:
RESOLVCONF = /etc/resolv.conf

# debootstrap program:
DEBOOTSTRAP = /usr/sbin/debootstrap

# What to use for `dpkg -x`:
DPKGX = dpkg -x

# Distro variant:
VARIANT = minbase

# BisyBox package name:
BBOXPKG = busybox-static

# Additional packages in the base system:
SYSPKGLIST = fakeroot $(BBOXPKG) rsync
NOSYSPKGLIST =

# Build system packages:
BUILDPKGLIST = build-essential devscripts equivs reprepro

# Test-root additional packages:
TESTPKGLIST = man

# Skip patterns for the `sync-in` target
SKIPSYNC = .git* .svn*

# Cross-build environment
CROSSBUILDPKGLIST = dpkg-cross crossbuild-essential-$(TARGET)

# Information message prefix
INFOPFX=[pocket]

# Output repository name and description
OUTNAME = pocket
OUTDESC = Built for $(REPO):$(DISTRO) with the help of Pocket and Hasher (http://github.com/wolneykien/pocket)
BUILDREPO = $(if $(filter pocket,$(OUTNAME)),repo,$(OUTNAME)-repo)

SOURCEDIR = SOURCE

# Essential variables
# -------------------

BUILDROOT = buildroot$(if $(ARCH),-$(ARCH))
INSTALLROOT = installroot$(if $(ARCH),-$(ARCH))

comma:= ,
empty:=
space:= $(empty) $(empty)

MAKEDEV = $(HSHPRIVDIR)/makedev.sh $(if $(NUM),-$(NUM))
USER_A = $(addsuffix _a$(NUM), $(USER))
USER_B = $(addsuffix _b$(NUM), $(USER))
RUN_A = $(HSHPRIVDIR)/chrootuid1.sh $(if $(NUM),-$(NUM))
RUN_B = $(HSHPRIVDIR)/chrootuid2.sh $(if $(NUM),-$(NUM))
GETUGID_A = $(HSHPRIVDIR)/getugid1.sh $(if $(NUM),-$(NUM))
GETUGID_B = $(HSHPRIVDIR)/getugid2.sh $(if $(NUM),-$(NUM))
ROOTER = rooter
BUILDER = builder
BUILDER_HOME = /usr/src
INDIR = /.in
INREPODIR = $(INDIR)/repo
OUTDIR = /.out
OUTREPODIR = $(OUTDIR)/repo

FAKEROOT = /usr/bin/fakeroot-sysv $(if $(wildcard $(BUILDROOT)/.fakedata),-i /.fakedata) -s /.fakedata
SHELL = /bin/bash
USERSHELL = /bin/bash


# Repository and distro configuration
# -----------------------------------

REPO = $(firstword $(subst :,$(space),$(firstword $(COMPONENTS))))
DISTRO = $(if $(filter $(REPO):%,$(COMPONENTS)),$(firstword $(subst /,$(space),$(patsubst $(REPO):%,%,$(firstword $(filter $(REPO):%,$(COMPONENTS)))))),$($(REPO)_DISTRO))
USER_DISTCOMPS = $(patsubst $(REPO):$(DISTRO)/%,%,$(filter $(REPO):$(DISTRO)/%,$(COMPONENTS)))
DISTCOMPS = $(if $(USER_DISTCOMPS),$(USER_DISTCOMPS),$(if $($(REPO)_COMPONENTS),$($(REPO)_COMPONENTS)))
SYSPKGLIST += $(if $($(REPO)_$(DISTRO)_INITIAL_PACKAGES),$($(REPO)_$(DISTRO)_INITIAL_PACKAGES),$($(REPO)_INITIAL_PACKAGES))
NOSYSPKGLIST += $(if $($(REPO)_$(DISTRO)_EXCLUDE_PACKAGES),$($(REPO)_$(DISTRO)_EXCLUDE_PACKAGES),$($(REPO)_EXCLUDE_PACKAGES))
BUILDPKGLIST += $(if $($(REPO)_$(DISTRO)_EXTRA_PACKAGES),$($(REPO)_$(DISTRO)_EXTRA_PACKAGES),$($(REPO)_EXTRA_PACKAGES))
TESTPKGLIST += $(if $($(REPO)_$(DISTRO)_EXTRA_PACKAGES),$($(REPO)_$(DISTRO)_EXTRA_PACKAGES),$($(REPO)_EXTRA_PACKAGES))

OVERLAYS = $(sort $(filter-out $(REPO),$(filter-out $(REPO):$(DISTRO),$(filter-out $(REPO):$(DISTRO)/%, $(COMPONENTS)))))

# Buildroot layout
# ----------------

DEBPATHS = $(BUILDROOT)/.host/debootstrap/debpaths

BUILDROOTTAR = $(REPO)-$(DISTRO)$(if $(ARCH),-$(ARCH)).tar.gz
BUILDROOTTARDIRS = debootstrap var/cache/apt/archives var/lib/apt/lists

BUSYBOX = /.host/bin/busybox
APTARCHIVES = /var/cache/apt/archives


# Output brief help page by default
default: help


## Pocketfile Debian
## =================

##
## Use `sync-in` then `build` to build the debian package from
## source code. Use `shell` for shell. Brief help page is accessible
## with `help` and a little more detailed manual with `doc` and
## `doc SUBJ=<subject>` actions.

##
## Architectures (native and cross)
## --------------------------------
##
## Use `ARCH=<arch>` parameter to specify the native architecture of
## the build and install chroots (`buildroot` and `installroot`
## respectively). An other paramerter `TARGET=<cross-arch>` is
## used to specify the desired target architecture when is building
## a package. See `show-targets` action help for more information.

##
## Targets (actions)
## -----------------

##
## * `bootstrap`  Set up a minimal Debian system in the buildroot.
## When is called for the first time, `bootstrap` uses `debootstrap`
## to download the required set of packages, saving them into
## `<repo>-<distro>-<arch>.tar.gz` tarball for future use. All of the
## downloaded packages are then installed and configured.
##
##     On successful  finish of the action the minimal system inside
## `buildroot` chroot is ready for use with other actions, such as
## `shell` and `build`. Most of the targets depend on `bootstrap`
## calling it automatically when the buildroot isn't ready. See the
## `download` action help for more information.
bootstrap: $(BUILDROOT)/.configured

$(BUILDROOT)/.preconfigured: $(BUILDROOT)/.preinstalled
	@echo "$(INFOPFX) Pre-configuretion..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'touch /etc/passwd' >>$(BUILDROOT)/.host/entry
	@echo 'touch /etc/group' >>$(BUILDROOT)/.host/entry
	@echo 'touch /etc/shadow' >>$(BUILDROOT)/.host/entry
	@echo 'update-passwd' >>$(BUILDROOT)/.host/entry
	@echo 'touch /etc/shells' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(BUILDROOT)/.configured: $(BUILDROOT)/.installed
	@echo "$(INFOPFX) Configuration..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@UGID_A="$$($(GETUGID_A))"; \
	 if [ -n "$UGID_A" ]; then \
	   echo "groupadd -g $${UGID_A#*:} $(ROOTER)" >>$(BUILDROOT)/.host/entry; \
	   echo "useradd -d /root -u $${UGID_A%%:*} -g $${UGID_A#*:} -s $(USERSHELL) $(ROOTER)" >>$(BUILDROOT)/.host/entry; \
	 else \
	   echo 'Unable to get user and group IDs of the pseudouser A'; \
	   exit 1; \
	 fi
	@UGID_B="$$($(GETUGID_B))"; \
	 if [ -n "$UGID_B" ]; then \
	   echo 'chmod 1777 $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry; \
	   echo "groupadd -g $${UGID_B#*:} $(BUILDER)" >>$(BUILDROOT)/.host/entry; \
	   echo "useradd -d $(BUILDER_HOME) -u $${UGID_B%%:*} -g $${UGID_B#*:} -s $(USERSHELL) $(BUILDER)" >>$(BUILDROOT)/.host/entry; \
	 else \
	   echo 'Unable to get user and group IDs of the pseudouser B'; \
	   exit 1; \
	 fi
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(BUILDROOT)/.extracted: $(DEBPATHS) $(BUILDROOT)/dev/.stamp \
	                 $(BUILDROOT)$(BUSYBOX)
	@echo "$(INFOPFX) Exctracting the base system files..."
	@echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry
	@echo 'set -e$(SHOPTS)' >>$(BUILDROOT)/.host/entry
	@sed -e 's/^[^[:space:]]\+[[:space:]]\+//' \
	     -e 's,^.*$$,$(BUSYBOX) dpkg-deb -x /.host& /,' \
	  $(DEBPATHS) >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) /.host/entry
	touch $@

$(BUILDROOT)/.preinstalled: $(BUILDROOT)/.extracted
	@echo "$(INFOPFX) Adjusting the states of packages..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'rm -f /var/lib/dpkg/status' >>$(BUILDROOT)/.host/entry
	@echo 'touch /var/lib/dpkg/status' >>$(BUILDROOT)/.host/entry
	@echo 'touch /var/lib/dpkg/available' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir -p /var/lib/dpkg/info' >>$(BUILDROOT)/.host/entry
	@echo 'install() {' >>$(BUILDROOT)/.host/entry
	@echo '  local pkg="$$1"' >>$(BUILDROOT)/.host/entry
	@echo '  local deb="$$2"' >>$(BUILDROOT)/.host/entry
	@echo '  dpkg-deb -f "$$deb"' >>$(BUILDROOT)/.host/entry
	@echo "  echo 'Status: install ok installed'" \
	  >>$(BUILDROOT)/.host/entry
	@echo '  echo' >>$(BUILDROOT)/.host/entry
	@echo '  dpkg-deb -c "$$deb" | sed -n -e "/^.*[[:space:]]\.\// { s,^.*[[:space:]]\./,,; s/^$$/./; s/[[:space:]]->[[:space:]].*$$//; s,/$$,,; s,^.*$$,/&,; p }" >/var/lib/dpkg/info/$$pkg.list' >>$(BUILDROOT)/.host/entry
	@echo "  echo \"Updated '\$$pkg' status\" >&2" >>$(BUILDROOT)/.host/entry
	@echo '}' >>$(BUILDROOT)/.host/entry
	@sed -e 's,^\([^[:space:]]\+\)[[:space:]]\+\(.*\)$$,install "\1" "/.host\2" >>/var/lib/dpkg/status,' $(DEBPATHS) >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(BUILDROOT)/.installed: $(BUILDROOT)/.preconfigured
	@pkgs="$$(sed -e 's/^[^[:space:]]\+[[:space:]]\+//' -e 's,^.*$$,/.host&,' -e 's,^/.host/var/cache/apt/archives/,,' $(DEBPATHS) | tr '\n' ' ')"; \
	 if [ -n "$$pkgs" ]; then \
	   echo "$(INFOPFX) Reinstalling packages..."; \
	   echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry; \
	   echo 'cp /var/lib/dpkg/status /var/lib/dpkg/status.ok' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd /.host/var/cache/apt/archives' >>$(BUILDROOT)/.host/entry; \
	   echo "dpkg -i $$pkgs" >>$(BUILDROOT)/.host/entry; \
	   chmod 0755 $(BUILDROOT)/.host/entry; \
	   $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry; \
	 fi
	touch $@

$(BUILDROOT)$(BUSYBOX): $(DEBPATHS)
	@echo "$(INFOPFX) Exctracting the busybox program..."
	bb="$$(sed -n -e 's/^$(BBOXPKG)[[:space:]]\+//p' $(DEBPATHS))"; \
	if [ -n "$$bb" ]; then \
	    $(DPKGX) $(BUILDROOT)/.host$$bb $(BUILDROOT)/.host; \
	    touch $@; \
	else \
	    echo "Error: package '$(BBOXPKG)' not found"; \
	    exit 1; \
	fi

##
## * `download`  Download the set of packages required by the minimal
## system. The action uses `debootstrap` to get the packages saving
## the result into `<repo>-<distro>-<arch>.tar.gz` tarball. Additional
## packages are included in the minimal system: `fakeroot`,
## `busybox-static`, `rsync`. More packages can specified for download
## with the `<distro>_INITIAL_PACKAGES` configuration file variable.
##
##     See `show-config` action and `pocket-init` help for more
## information.
download: $(BUILDROOTTAR)
extract: $(DEBPATHS)

$(DEBPATHS): $(BUILDROOTTAR) $(BUILDROOT)/.stamp
	@echo "$(INFOPFX) Generating the list of the base packages..."
	tar xpf $(BUILDROOTTAR) -C $(BUILDROOT)/.host
	if [ -n "$(strip $(NOSYSPKGLIST))" ]; then \
	    echo "$(strip $(NOSYSPKGLIST))" | \
	        sed -e 's/[ \t]\+/\n/g' | \
	        sed -e 's,^.*$$,^&[[:space:]],' \
		  >"$@.exclude"; \
	    if [ -s "$@.exclude" ]; then \
	        grep -v -f "$@.exclude" "$@" >"$@.new"; \
		mv "$@.new" "$@"; \
	    fi; \
	fi
	touch $@

$(BUILDROOTTAR):
	$(if $(REPO),,$(error No repositories are specified))
	$(if $($(REPO)_MIRROR),,$(error Mirror of "$(REPO)" is unknown))
	$(if $(DISTRO),,$(error Distribution name is not specified))
	@echo "$(INFOPFX) Downloading the base packages..."
	rm -rf $(BUILDROOT)/.host
	mkdir -p $(BUILDROOT)
	$(DEBOOTSTRAP) --download-only \
		       $(if $(ARCH),--arch=$(ARCH)) \
		       --variant=$(VARIANT) \
	    $(if $(strip $(SYSPKGLIST)),--include=$(subst $(space),$(comma),$(strip $(SYSPKGLIST)))) \
	    $(if $(strip $(NOSYSPKGLIST)),--exclude=$(subst $(space),$(comma),$(strip $(NOSYSPKGLIST)))) \
	    $(if $(DISTCOMPS),--components=$(subst $(space),$(comma),$(DISTCOMPS))) \
		$(DISTRO) $(BUILDROOT)/.host $($(REPO)_MIRROR)
	tar cpf $@ -C $(BUILDROOT)/.host $(BUILDROOTTARDIRS)

$(BUILDROOT)/.stamp:
	mkdir -p $(BUILDROOT)
	chgrp $(USER_A) $(BUILDROOT)
	chmod 1775 $(BUILDROOT)
	mkdir -p $(BUILDROOT)/.host
	mkdir -p $(BUILDROOT)$(INDIR)
	mkdir -p $(BUILDROOT)$(OUTDIR)
	chgrp $(USER_B) $(BUILDROOT)$(OUTDIR)
	chmod 1770 $(BUILDROOT)$(OUTDIR)
	touch $@

$(BUILDROOT)/dev/.stamp: $(BUILDROOT)/.stamp
	mkdir -p $(BUILDROOT)/dev
	chgrp $(USER_A) $(BUILDROOT)/dev
	mkdir $(BUILDROOT)/dev/pts
	chgrp $(USER_A) $(BUILDROOT)/dev/pts
	$(MAKEDEV) $(abspath $(BUILDROOT))
	mkdir -m1777 $(BUILDROOT)/dev/shm
	touch $@

##
## * `clean`    Clean the buildroot making it necessary to
## `bootstrap` again.
clean: clean-builder
	@if [ -d $(BUILDROOT)$(OUTREPODIR) ]; then \
	  $(MAKE) -f $(firstword $(MAKEFILE_LIST)) bootstrap; \
	  echo "$(INFOPFX) Cleanup the chroot: $(abspath $(BUILDROOT))"; \
	  echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry; \
	  echo 'set -e$(SHOPTS)' >>$(BUILDROOT)/.host/entry; \
	  echo 'rm -rf $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry; \
	  echo 'echo "Removed \"$(OUTREPODIR)\"" >&2' >>$(BUILDROOT)/.host/entry; \
	  chmod 0755 $(BUILDROOT)/.host/entry; \
	  $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry; \
	fi
	@if [ -n '$(wildcard $(BUILDROOT)/*)'  ]; then \
	  $(MAKE) -f $(firstword $(MAKEFILE_LIST)) bootstrap; \
	  echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry; \
	  echo 'set -e$(SHOPTS)' >>$(BUILDROOT)/.host/entry; \
	  echo 'for f in /*; do' >>$(BUILDROOT)/.host/entry; \
	  echo '  [ -O "$$f" ] || continue' >>$(BUILDROOT)/.host/entry; \
	  echo '  rm -rf "$$f"' >>$(BUILDROOT)/.host/entry; \
	  echo '  echo "Removed \"$$f\"" >&2' >>$(BUILDROOT)/.host/entry; \
	  echo 'done' >>$(BUILDROOT)/.host/entry; \
	  chmod 0755 $(BUILDROOT)/.host/entry; \
	  $(RUN_A) $(abspath $(BUILDROOT)) /.host/entry; \
	fi
	rm -fv $(BUILDROOT)/.testenv
	rm -fv $(BUILDROOT)/.installrepodone
	rm -fv $(BUILDROOT)/.buildenv
	rm -fv $(BUILDROOT)/.cross
	rm -fv $(BUILDROOT)/.updated
	rm -fv $(BUILDROOT)/.configured
	rm -fv $(BUILDROOT)/.installed
	rm -fv $(BUILDROOT)/.preconfigured
	rm -fv $(BUILDROOT)/.preinstalled
	rm -fv $(BUILDROOT)/.extracted
	rm -fv $(BUILDROOT)/.fakedata

##
## * `clean-builder`    Clean the home directory of the user
## 'builder' (/usr/src).
clean-builder:
	@if [ -n '$(wildcard $(BUILDROOT)$(BUILDER_HOME)/*)' ]; then \
	    $(MAKE) -f $(firstword $(MAKEFILE_LIST)) bootstrap; \
	    echo "$(INFOPFX) Cleanup the builder home dir..."; \
	    if [ -d $(BUILDROOT)$(BUILDER_HOME) ]; then \
	       echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry; \
	       echo 'set -e$(SHOPTS)' >>$(BUILDROOT)/.host/entry; \
	       echo 'find "$(BUILDER_HOME)" -mindepth 1 -prune -exec rm -rf {} \;' >>$(BUILDROOT)/.host/entry; \
	       echo 'echo "Cleaned \"$(BUILDER_HOME)\"" >&2' >>$(BUILDROOT)/.host/entry; \
	       chmod 0755 $(BUILDROOT)/.host/entry; \
	       $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry; \
	     fi; \
	fi

$(BUILDROOT)/etc/resolv.conf: $(BUILDROOT)/.configured
	$(if $(RESOLVCONF),,$(error resolv.conf is not configured))
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cat <<EOF >/etc/resolv.conf' >>$(BUILDROOT)/.host/entry
	@cat $(RESOLVCONF) >>$(BUILDROOT)/.host/entry
	@echo 'EOF' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	@echo "$(INFOPFX) Setting up $(BUILDROOT)/etc/resolv.conf"
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry

##
## * `update`    Call `apt-get update` to refresh the set of known
## packages. If any packages were built in this pocket before,
## the contents of the `repo` directory is included in the
## list of package sources making them automatically available for the
## `install` and `install-builddeps` actions. Whith this accumulation
## system building of one package can require some previously built
## packages. See the `repo` action help for more information.
##
##     If the `CROSS=yes` parameter is specified then the corresponding
## cross toolchain repository (if any is configured for the distro)
## is added to the package source list. Then the list of cross build
## targets can be listed with the `show-targets` action.
update: rm-updated $(BUILDROOT)/.updated

rm-updated:
	@if [ -e $(BUILDROOT)/.updated ]; then \
	  rm -fv $(BUILDROOT)/.cross; \
	  rm -fv $(BUILDROOT)/.updated;\
	  echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry; \
	  echo 'rm -fv /etc/resolv.conf' >>$(BUILDROOT)/.host/entry; \
	  $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry; \
	fi

##
## * `clean-cache`    Clean the apt's cache: makes no package
## available.
clean-cache: rm-updated
	@echo "$(INFOPFX) Cleanup the package cache..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'rm -rf /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'rm -f /etc/apt/sources.list' >>$(BUILDROOT)/.host/entry
	@echo 'apt-get update' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry

$(BUILDROOT)/.updated: $(BUILDROOT)/etc/resolv.conf $(if $(wildcard $(BUILDREPO)/dists/$(OUTNAME)/Release),$(BUILDREPO)/dists/$(OUTNAME)/Release)
	$(if $(DISTRO),,$(error Distribution name is not specified))
	$(if $(DISTCOMPS),,$(error No distribution components are specified))
	@echo "$(INFOPFX) Updating the package cache..."
	rm -rf $(BUILDROOT)$(INREPODIR)
	if [ -f $(BUILDREPO)/dists/$(OUTNAME)/Release ]; then \
	   mkdir $(BUILDROOT)$(INREPODIR); \
	   cp -a $(BUILDREPO)/* \
		 $(BUILDROOT)$(INREPODIR)/ ; \
	fi
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'rm -rf /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'rm -f /etc/apt/sources.list' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir /etc/apt/sources.list.d' >>$(BUILDROOT)/.host/entry
	@echo 'echo "deb $($(REPO)_MIRROR) $(DISTRO) $(DISTCOMPS)" >/etc/apt/sources.list.d/$(REPO)-$(DISTRO).list' >>$(BUILDROOT)/.host/entry
	$(foreach ovl,$(sort $(foreach ovlrdc,$(OVERLAYS),$(firstword $(subst :,$(space),$(ovlrdc))))),$(foreach ovldist,$(if $(filter $(ovl):%,$(OVERLAYS)),$(sort $(foreach ovldc,$(patsubst $(ovl):%,%,$(filter $(ovl):%,$(OVERLAYS))),$(firstword $(subst /,$(space),$(ovldc))))),$($(subst -,_,$(ovl))_DISTRO)),echo 'echo "deb $($(subst -,_,$(ovl))_MIRROR) $(ovldist) $(if $(filter $(ovl):$(ovldist)/%,$(OVERLAYS)),$(patsubst $(ovl):$(ovldist)/%,%,$(filter $(ovl):$(ovldist)/%,$(OVERLAYS))),$(if $($(subst -,_,$(ovl))_$(subst -,_,$(ovldist))_COMPONENTS),$($(subst -,_,$(ovl))_$(subst -,_,$(ovldist))_COMPONENTS),$($(subst -,_,$(ovl))_COMPONENTS)))" >/etc/apt/sources.list.d/$(ovl)-$(ovldist).list' >>$(BUILDROOT)/.host/entry;))
	@if [ -n "$(CROSS)" -a -n "$($(REPO)_$(DISTRO)_CROSS_MIRROR)" ]; then \
	    echo '    echo "deb $($(REPO)_$(DISTRO)_CROSS_MIRROR) $(DISTRO) $($(REPO)_$(DISTRO)_CROSS_COMPONENTS)" >/etc/apt/sources.list.d/$(DISTRO)-cross.list' >>$(BUILDROOT)/.host/entry; \
	fi
	@if [ -d $(BUILDROOT)$(INREPODIR) ]; then \
	   comps="$$(sed -n -e '/^Components:/ { s/^[^[:space:]]\+[[:space:]]*//p; q }' $(BUILDROOT)$(INREPODIR)/dists/$(OUTNAME)/Release)"; \
	   if [ -z "$$comps" ]; then \
	     echo "No components in $(BUILDROOT)$(INREPODIR)/dists/$(OUTNAME)" >&2; \
	     exit 1; \
	   fi; \
	   for a in $$(sed -n -e '/^Architectures:/ { s/^[^[:space:]]\+[[:space:]]*//p; q }' $(BUILDROOT)$(INREPODIR)/dists/$(OUTNAME)/Release); do \
	       echo "echo \"deb [arch=$$a] file://$(INREPODIR) $(OUTNAME) $$comps\" >>/etc/apt/sources.list" >>$(BUILDROOT)/.host/entry; \
               echo "dpkg --add-architecture $$a" >>$(BUILDROOT)/.host/entry; \
	   done; \
	   echo "echo \"deb-src file://$(INREPODIR) $(OUTNAME) $$comps\" >>/etc/apt/sources.list" >>$(BUILDROOT)/.host/entry; \
	fi
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get update' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	@[ -z "$(CROSS)" ] || touch $(BUILDROOT)/.cross
	touch $@

$(BUILDROOT)/.updated.$(TARGET): $(BUILDROOT)/.updated
	$(if $(TARGET),,$(error Target architecture is not specified))
	@echo "$(INFOPFX) Updating the package cache ($(TARGET))..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'if [ "$(TARGET)" != "$$(dpkg --print-architecture)" ]; then' >>$(BUILDROOT)/.host/entry
	@if [ -n "$($(REPO)_$(DISTRO)_CROSS_MIRROR)" ]; then \
	    echo '    echo "deb $($(REPO)_$(DISTRO)_CROSS_MIRROR) $(DISTRO) $($(REPO)_$(DISTRO)_CROSS_COMPONENTS)" >/etc/apt/sources.list.d/$(DISTRO)-cross.list' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo '    touch /etc/apt/sources.list.d/.cross' >>$(BUILDROOT)/.host/entry
	@echo '    dpkg --add-architecture $(TARGET)' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get update' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	[ ! -e $(BUILDROOT)/etc/apt/sources.list.d/.cross ] || touch $(BUILDROOT)/.cross
	touch $@

$(BUILDROOT)/.cross:
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) update CROSS=yes ARCH=$(ARCH) TARGET=$(TARGET) BUILDROOT=$(BUILDROOT)


##
## * `install`    Install the given packages into the buildroot. The
## package names are specified with the `PKGS=` parameter.
install: $(BUILDROOT)/.updated
	$(if $(filter install,$(MAKECMDGOALS)),$(if $(PKGS),,$(error Specify packages to install using 'PKGS=')))
	@echo "$(INFOPFX) Installing the packages: $(PKGS)"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(PKGS)' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry

##
## * `shell`    Invoke the command shell inside the build chroot.
## The optional parameter `ROLE=rooter` can be used to obtain root
## privileges. To get network access pass `SHARE_NETWORK=yes`.
## The `USERSHELL=<path>` parameter can be used to specify the
## shell program to run inside the chroot. Moreover, the `CMD=<command>`
## parameter is passed via `-c` option to the shell providing
## a way to execute arbitrary command inside the chroot and exit.
shell: $(BUILDROOT)/.configured
	@echo "$(INFOPFX) Entering $(abspath $(BUILDROOT)/$(BUILDER_HOME))"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@if [ "$(ROLE)" = '$(ROOTER)' ]; then \
	   echo "export TMPDIR='/tmp'" >>$(BUILDROOT)/.host/entry; \
	   echo 'cd "/root"' >>$(BUILDROOT)/.host/entry; \
	   echo "$(USERSHELL) $(if $(CMD),-c '$(CMD)')" >>$(BUILDROOT)/.host/entry; \
	   $(if $(SHARE_NETWORK),share_network=$(SHARE_NETWORK)) use_pty=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry; \
	else \
	   echo "export TMPDIR='$(BUILDER_HOME)/tmp'" >>$(BUILDROOT)/.host/entry; \
	   echo 'mkdir -p "$$TMPDIR"' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd "$(BUILDER_HOME)"' >>$(BUILDROOT)/.host/entry; \
	   echo "$(USERSHELL) $(if $(CMD),-c '$(CMD)')" >>$(BUILDROOT)/.host/entry; \
	   $(if $(SHARE_NETWORK),share_network=$(SHARE_NETWORK)) use_pty=yes $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry; \
	fi; \
	exit 0

##
## * `install-buildenv`    Install the build environment packages
## inside the buildroot. The following set of packages are installed
## by default: `build-essential`, `devscripts`, `equivs`, `reprepro`.
## Additional packages are configured with the
## `<distro>_EXTRA_PACKAGES` configuration file variable. See
## `show-config` action and `pocket-init` help for more
## information. This target is invoked automatically by the `build`,
## `rebuild` and similar targets.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build. In that case the
## `crossbuild-essential-$TARGET` packages are installed in addition
## to `build-essential`. See the `show-targets` action help for more
## information.
install-buildenv: $(BUILDROOT)/.buildenv $(if $(TARGET),$(BUILDROOT)/.buildenv.$(TARGET))

$(BUILDROOT)/.buildenv: $(BUILDROOT)/.updated
	@echo "$(INFOPFX) Installing the build environment: $(strip $(BUILDPKGLIST))"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(strip $(BUILDPKGLIST))' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(BUILDROOT)/.buildenv.$(TARGET): $(BUILDROOT)/.buildenv $(BUILDROOT)/.updated.$(TARGET)
	@echo "$(INFOPFX) Installing the build environment ($(TARGET)): $(strip $(CROSSBUILDPKGLIST))"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	 fi
	@if [ -n "$(TARGET)" ]; then \
	    echo 'if [ "$(TARGET)" != "$$(dpkg --print-architecture)" ]; then' >>$(BUILDROOT)/.host/entry; \
	    echo '    apt-get install -y --no-install-recommends --allow-unauthenticated $(strip $(CROSSBUILDPKGLIST))' >>$(BUILDROOT)/.host/entry; \
	    echo 'fi' >>$(BUILDROOT)/.host/entry; \
	fi
	@chmod 0755 $(BUILDROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry
	touch $@

##
## * `sync-in`    Synchronize the buildroot package source directory
## FROM the given directory outside the buildroot. By default, after
## the action the buildroot package source directory `/usr/src/SOURCE`
## is identical to the directory given in the `FROM=<path>` parameter.
## The existing files that are not present in the FROM directory *are
## removed*.
##
##     With the optional parameter `OVER=yes` the files are copied
## over the existing ones and no files are deleted.
##
##     The `COMPOSE=yes` optional parameter turns on the source tree
## composition mode: for each symbolic link in the `FROM` directory
## the corresponding link target is copied into the `/usr/src/SOURCE`.
##
##     If the package source format isn't "native", then the
## corresponding `.orig.tar.gz` is created from the source tree (`OVER`
## mode disables this). Files and directories specified in the
## `SKIPSYNC` configuration variable (or command-line argument) are
## not copied into the buildroot. By default the skip list is
## "`.git* .svn*`".
sync-in: $(BUILDROOT)/.buildenv
	$(if $(filter sync-in,$(MAKECMDGOALS)),$(if $(FROM),,$(error Specify the package source directory to copy from with 'FROM=')))
	rsync -aI --inplace --delete $(if $(strip $(SKIPSYNC)),$(addprefix --exclude=,$(strip $(SKIPSYNC)))) $(abspath $(FROM))/ $(BUILDROOT)$(INDIR)/$(SOURCEDIR)
	case "$(COMPOSE)" in \
	    0|no|NO|false|FALSE) \
	        ;; \
	    ?*) \
	        cd $(abspath $(FROM)); \
	        find  -mindepth 1 -maxdepth 1 -type l | \
	        while read f; do \
	            rm "$(abspath $(BUILDROOT))$(INDIR)/$(SOURCEDIR)/$${f#./}"; \
	            rsync -aI --inplace \
	                "$$(readlink "$$f")/" \
	                "$(abspath $(BUILDROOT))$(INDIR)/$(SOURCEDIR)/$${f#./}/"; \
	        done; \
	        ;; \
	esac
	@echo "$(INFOPFX) Copy files from $(abspath $(FROM)) into the builder home dir"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'OVER=$(OVER)' >>$(BUILDROOT)/.host/entry
	@echo 'case "$$OVER" in 0|no|NO|false|FALSE) OVER=;; esac' >>$(BUILDROOT)/.host/entry
	@echo 'DELETE=' >>$(BUILDROOT)/.host/entry
	@echo '[ -n "$$OVER" ] || DELETE=--delete' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rsync -aI --inplace $$DELETE $(INDIR)/$(SOURCEDIR) ./' >>$(BUILDROOT)/.host/entry
	@echo 'if [ -z "$$OVER" ]; then' >>$(BUILDROOT)/.host/entry
	@echo '    cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo '    if ! dpkg-source --print-format . | grep -q "native"; then' >>$(BUILDROOT)/.host/entry
	@echo '        rm -fv ../*.orig.tar.gz' >>$(BUILDROOT)/.host/entry
	@echo '        tar czf ../$$(dpkg-parsechangelog | sed -n -e '\''s/^Source:[[:space:]]\+//p'\'')_$$(dpkg-parsechangelog | sed -n -e '\''/^Version:/ {s/^Version:[[:space:]]\+//; s/^[0-9]\+://; s/-.*$$//; p}'\'').orig.tar.gz --exclude=debian/\* .' >>$(BUILDROOT)/.host/entry
	@echo '    fi' >>$(BUILDROOT)/.host/entry
	@echo '    cd ..' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry

##
## * `sync-out`    Update the package source in the given directory from
## the buildroot. Existing files in the directory specified with the
## `TO=<path>` parameter are updated with the files from `/usr/src/SOURCE`
## buildroot directory.
sync-out: $(BUILDROOT)/.configured
	$(if $(filter sync-out,$(MAKECMDGOALS)),$(if $(TO),,$(error Specify the package source directory to copy into with 'TO=')))
	@echo "$(INFOPFX) Update files in $(abspath $(TO)) from the builder home dir"
	rsync -a --inplace $(if $(UPDATE),,--update --existing) $(BUILDROOT)$(BUILDER_HOME)/$(SOURCEDIR)/ $(abspath $(TO))


gencontrol:
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo '[ -e debian/pocket ] || exit 0' >>$(BUILDROOT)/.host/entry
	@echo 'cp -a debian/control /tmp/control.orig' >>$(BUILDROOT)/.host/entry
	@echo 'touch -r debian/control /tmp/control.orig' >>$(BUILDROOT)/.host/entry
	@echo 'if [ -n "$(TARGET)" -a "$(TARGET)" != "$$(dpkg --print-architecture)" ]; then' >>$(BUILDROOT)/.host/entry
	@echo 'echo "Invoke debian/pocket with \`cross\` (TARGET=$(TARGET)) target..."' >>$(BUILDROOT)/.host/entry
	@echo '    make -C debian -f pocket cross TARGET=$(TARGET)' >>$(BUILDROOT)/.host/entry
	@echo 'else' >>$(BUILDROOT)/.host/entry
	@echo 'echo "Invoke debian/pocket with default target..."' >>$(BUILDROOT)/.host/entry
	@echo '    make -C debian -f pocket TARGET=$(TARGET)' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'if diff -q debian/control /tmp/control.orig 1>/dev/null; then' >>$(BUILDROOT)/.host/entry
	@echo '    echo "Resulting debian/control file is unchanged. Reset its timestamp"' >>$(BUILDROOT)/.host/entry
	@echo '    touch -r /tmp/control.orig debian/control' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'rm -f /tmp/control.orig' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry

##
## * `install-builddeps`    Install the packages that are required
## to build the target package from the source code. Installs all the
## packages, specified in the `Build-Depends` control file field.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build. See the `show-targets`
## action for more information.
install-builddeps: $(BUILDROOT)/.updated$(if $(TARGET),.$(TARGET)) $(BUILDROOT)/.buildenv$(if $(TARGET),.$(TARGET)) gencontrol
	@echo "$(INFOPFX) Check and install the build requirements..."
	@echo '#!/bin/sh $(if $(SHOPTS),-$(SHOPTS))' >$(BUILDROOT)/.host/entry
	@echo 'ret=0' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo 'trap "mv ../.control.orig debian/control" EXIT' >>$(BUILDROOT)/.host/entry
	@echo 'trap ":" INT TERM QUIT' >>$(BUILDROOT)/.host/entry
	@echo 'cp -a debian/control ../.control.orig' >>$(BUILDROOT)/.host/entry
	@echo 'sed -i -e "/^Build-Depends[^:]*:/,/^[^[:space:]]/ { /^Build-Depends[^:]*:/ { s/:native/:$$(dpkg --print-architecture)/g; }; /^[[:space:]]/ { s/:native/:$$(dpkg --print-architecture)/g; } }" debian/control' >>$(BUILDROOT)/.host/entry
	@echo 'if ! dpkg-checkbuilddeps $(if $(TARGET),-a $(TARGET)); then' >>$(BUILDROOT)/.host/entry
	@echo '  echo "$(INFOPFX) There are unmet dependencies. Preparing deps meta-package..."' >>$(BUILDROOT)/.host/entry
	@if [ -n "$(TARGET)" ]; then \
	  echo ' sed -i -e '\''/^Build-Depends[^:]*:/,/^[^[:space:]]/ { /^Build-Depends[^:]*:/ { s/^Build-Depends[^:]*:[[:space:]]*/Build-Depends: /; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*,/ \1:$(TARGET)\2,/g; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*$$/ \1:$(TARGET)\2/ }; /^[[:space:]]/ { s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*,/ \1:$(TARGET)\2,/g; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*$$/ \1:$(TARGET)\2/ }; }'\'' debian/control' >>$(BUILDROOT)/.host/entry; \
	  echo ' BUILDOPTS="$${BUILDOPTS} -Pcross"' >>$(BUILDROOT)/.host/entry; \
	  echo ' export DEB_BUILD_PROFILES=cross' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo '  sed -i -e '\''/^#/ d'\'' debian/control' >>$(BUILDROOT)/.host/entry
	@echo '  mk-build-deps || ret=$$?' >>$(BUILDROOT)/.host/entry
	@echo '  if [ $$ret -eq 0 ]; then' >>$(BUILDROOT)/.host/entry
	@echo '    mv -vf *build-deps*.deb ../.build-deps.deb' >>$(BUILDROOT)/.host/entry
	@echo '  fi' >>$(BUILDROOT)/.host/entry
	@echo '  rm -fv *build-deps*.deb' >>$(BUILDROOT)/.host/entry
	@echo 'else' >>$(BUILDROOT)/.host/entry
	@echo '  rm -f ../.build-deps.deb' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'exit $$ret' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry
	@if [ -e $(BUILDROOT)$(BUILDER_HOME)/.build-deps.deb ]; then \
	   echo '$(INFOPFX) The deps meta-package was built. Installing it to satisfy the dependencies...'; \
	   echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry; \
	   if [ -n "$$http_proxy" ]; then \
	     echo "export http_proxy='$$http_proxy'" >>$(BUILDROOT)/.host/entry; \
	     echo "export no_proxy='$$no_proxy'" >>$(BUILDROOT)/.host/entry; \
	   fi; \
	   echo 'dpkg --unpack $(BUILDER_HOME)/.build-deps.deb' >>$(BUILDROOT)/.host/entry; \
	   echo 'apt-get install -f -y --no-install-recommends --allow-unauthenticated -o Debug::pkgProblemResolver=yes' >>$(BUILDROOT)/.host/entry; \
	   ret=0; \
	   chmod 0755 $(BUILDROOT)/.host/entry; \
	   share_network=yes $(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry || ret=$$?; \
	   [ $$ret -eq 0 ] || exit $$ret; \
	   echo "$(INFOPFX) Check the build requirements again..."; \
	   echo '#!/bin/sh $(if $(SHOPTS),-$(SHOPTS))' >$(BUILDROOT)/.host/entry; \
	   echo 'ret=0' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry; \
	   echo 'cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry; \
	   echo 'trap "mv ../.control.orig debian/control" EXIT' >>$(BUILDROOT)/.host/entry; \
	   echo 'trap ":" INT TERM QUIT' >>$(BUILDROOT)/.host/entry; \
	   echo 'cp -a debian/control ../.control.orig' >>$(BUILDROOT)/.host/entry; \
	   echo 'sed -i -e "/^Build-Depends[^:]*:/,/^[^[:space:]]/ { /^Build-Depends[^:]*:/ { s/:native/:$$(dpkg --print-architecture)/g; }; /^[[:space:]]/ { s/:native/:$$(dpkg --print-architecture)/g; } }" debian/control' >>$(BUILDROOT)/.host/entry; \
	   if [ "x$(TARGET)" != "x" ]; then \
	     echo '  sed -i -e '\''/^Build-Depends[^:]*:/,/^[^[:space:]]/ { /^Build-Depends[^:]*:/ { s/^Build-Depends[^:]*:[[:space:]]*/Build-Depends: /; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*,/ \1:$(TARGET)\2,/g; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*$$/ \1:$(TARGET)\2/ }; /^[[:space:]]/ { s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*,/ \1:$(TARGET)\2,/g; s/[[:space:]]\+\([^]:,()<>[:space:]]\+\)\(\([[:space:]]*\(\(([^)]*)\)\|\(<[^>]*>\)\|\([[][^]]*[]]\)\)\)*\)\?[[:space:]]*$$/ \1:$(TARGET)\2/ }; }'\'' debian/control' >>$(BUILDROOT)/.host/entry; \
	     echo '  BUILDOPTS="$${BUILDOPTS} -Pcross"' >>$(BUILDROOT)/.host/entry; \
	     echo '  export DEB_BUILD_PROFILES=cross' >>$(BUILDROOT)/.host/entry; \
	   fi; \
	   echo 'if ! dpkg-checkbuilddeps $(if $(TARGET),-a $(TARGET)) $${BUILDOPTS}; then' >>$(BUILDROOT)/.host/entry; \
	   echo '  echo "$(INFOPFX) Something went wrong: the build requirements are still not met!"' >>$(BUILDROOT)/.host/entry; \
	   echo '  ret=1' >>$(BUILDROOT)/.host/entry; \
	   echo 'else' >>$(BUILDROOT)/.host/entry; \
	   echo '  echo "$(INFOPFX) Build requirements are met. Ready to build"' >>$(BUILDROOT)/.host/entry; \
	   echo 'fi' >>$(BUILDROOT)/.host/entry; \
	   echo 'exit $$ret' >>$(BUILDROOT)/.host/entry; \
	   chmod 0755 $(BUILDROOT)/.host/entry; \
	   $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry; \
	else \
	   echo '$(INFOPFX) Build requirements are met. Ready to build'; \
	fi


##
## * `cleanpkg`    Clean (delete) the files produced by the last
## package building procedure. The wildcard includes: `*.deb`,
## `*.dsc`, `*.changes` and `*.tar.*`.
cleanpkg: $(BUILDROOT)/.configured
	@echo "$(INFOPFX) Deleting all built packages..."
	@rm -fv $(BUILDROOT)/.buildok
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -rf .keep' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir .keep' >>$(BUILDROOT)/.host/entry
	@echo '[ $$(find -maxdepth 1 -type f -name "*.orig.tar.*" | wc -l) -eq 0 ] || mv *.orig.tar.* .keep' >>$(BUILDROOT)/.host/entry
	@echo 'rm -fv *.deb *.dsc *.changes *.tar.*' >>$(BUILDROOT)/.host/entry
	@echo '[ $$(find .keep/ -maxdepth 1 -name "*.orig.tar.*" | wc -l) -eq 0 ] || mv .keep/*.orig.tar.* ./' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry
	@echo '$(INFOPFX) Searching for previous *.build-deps package...'
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'PKGS=$$(dpkg -l | grep build-deps | awk '\'{ print $$\2 }\'')' >>$(BUILDROOT)/.host/entry
	@echo 'if [ -n "$${PKGS}"  ]; then' >>$(BUILDROOT)/.host/entry
	@echo '  echo Deleting: "$${PKGS}"' >>$(BUILDROOT)/.host/entry
	@echo '  echo "$${PKGS}" | xargs dpkg -P' >>$(BUILDROOT)/.host/entry
	@echo '  apt-get -y autoremove ' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_A) $(abspath $(BUILDROOT)) $(FAKEROOT) /.host/entry

##
## * `buildpkg`    Start or continue building the Debian package from
## source. The package source code is expected to be in
## /usr/src/SOURCE where it is placed before with the `sync-in`
## action. The `dpkg-buildpackage` is called with the `-nc` (not
## clean) option making the next try to build the package.
## The resulting package files are written to the /usr/src
## directory. This is an intermediate action usually called by
## `build`.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build. See the `show-targets`
## action help for more information.
##
##     The `OUTNAME=<repo>` parameter can be used to override the
## repository name (and therefore, the name of its directory) given
## at pocket initialization (use `show-config` without parameters to
## get it).
##
##     The `NOCLEAN=<anything>` parameter can be used to instruct
## the `dpkg-buildpackage` tool to skip process of clean it's build directory
buildpkg: | cleanpkg install-builddeps 
	@echo "$(INFOPFX) Building the package from source (no clean)..."
	@rm -f $(BUILDROOT)/.buildok
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo 'if [ -n "$(TARGET)" -a "$(TARGET)" != "$$(dpkg --print-architecture)" ]; then' >>$(BUILDROOT)/.host/entry
	@echo '    export CONFIG_SITE=/etc/dpkg-cross/cross-config.$(TARGET)' >>$(BUILDROOT)/.host/entry
	@echo '    export DEB_BUILD_OPTIONS=nocheck' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'BUILDOPTS="-F -us -uc"' >>$(BUILDROOT)/.host/entry
	@if [ "x$(NOCLEAN)" != "x"  ]; then \
	  echo 'BUILDOPTS="$${BUILDOPTS} -nc"' >>$(BUILDROOT)/.host/entry; \
	fi  
	@if [ "x$(TARGET)" != "x" ]; then \
	  echo 'BUILDOPTS="$${BUILDOPTS} -Pcross"' >>$(BUILDROOT)/.host/entry; \
	  echo 'export DEB_BUILD_PROFILES=cross' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo 'dpkg-buildpackage -d $(if $(TARGET),-a$(TARGET)) $${BUILDOPTS}' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(if $(SHARE_NETWORK),share_network=$(SHARE_NETWORK)) $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry
	@touch $(BUILDROOT)/.buildok
	@$(MAKE) -si -f $(firstword $(MAKEFILE_LIST)) filecheck ARCH=$(ARCH) BUILDROOT=$(BUILDROOT)

##
## * `rebuildpkg`    Rebuild the named package from its source package.
## The source package should be available from the repository accumulator
## (or an other `apt` source list). That usually means that the same
## package already was built (possibly, for an other architecture).
## The name of the package is accepted via the `PKG=<package>` parameter.
## This is an intermediate action usually called by `rebuild`.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build (see the `show-targets`
## action help for more information). In that case, *only the
## architecture-specific* packages are rebuilt.
##
##     The `OUTNAME=<repo>` parameter can be used to override the
## repository name (and therefore, the name of its directory) given
## at pocket initialization (use `show-config` without parameters to
## get it).
rebuildpkg: | getsource cleanpkg install-builddeps
	@echo "$(INFOPFX) Rebuilding binary packages from source..."
	@rm -f $(BUILDROOT)/.buildok
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo 'if [ -n "$(TARGET)" -a "$(TARGET)" != "$$(dpkg --print-architecture)" ]; then' >>$(BUILDROOT)/.host/entry
	@echo '    export CONFIG_SITE=/etc/dpkg-cross/cross-config.$(TARGET)' >>$(BUILDROOT)/.host/entry
	@echo '    export DEB_BUILD_OPTIONS=nocheck' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'BUILDOPTS="-us -uc"' >>$(BUILDROOT)/.host/entry
	@if [ -n "$(TARGET)" ]; then \	  
	  echo 'BUILDOPTS="$${BUILDOPTS} -Pcross"' >>$(BUILDROOT)/.host/entry; \
	  echo 'export DEB_BUILD_PROFILES=cross' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo 'dpkg-buildpackage -d $(if $(TARGET),-a$(TARGET) -B,-b) $${BUILDOPTS}' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry
	@touch $(BUILDROOT)/.buildok
	@$(MAKE) -si -f $(firstword $(MAKEFILE_LIST)) filecheck ARCH=$(ARCH) BUILDROOT=$(BUILDROOT)

##
## * `getsource`    Get the named source package from the repository
## accumulator (or an other `apt` source list) and prepare it for
## building. The name of the package is accepted via the `PKG=<package>`
## parameter.
getsource: $(BUILDROOT)/.buildenv $(BUILDROOT)/.updated
	$(if $(PKG),,$(error Specify the source package to get using 'PKG='))
	@echo "$(INFOPFX) Get the package source for: $(PKG)"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -fv *.deb *.dsc *.changes *.tar.*' >>$(BUILDROOT)/.host/entry
	@echo 'rm -rf $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo 'apt-get -y --allow-unauthenticated source $(PKG)' >>$(BUILDROOT)/.host/entry
	@echo "find -maxdepth 1 -type d -name '$(firstword $(subst =, ,$(subst :, ,$(PKG))))-*' -exec mv -vf '{}' $(SOURCEDIR) \\;" >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry

##
## * `filecheck`    Check if all of the installed files are packaged.
## If some files are not found in `*.deb` files, then a warning
## message is printed and exit status is non-zero. However, when
## invoked automatically from the `buildpkg` and `rebuildpkg` actions,
## the exit status is always zero: sometimes it is normal to have some
## files unpackaged.
filecheck: $(BUILDROOT)/.buildok
	@echo "$(INFOPFX) Compare the installed and packaged set of files..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'if [ ! -d $(SOURCEDIR)/debian/tmp ]; then' >>$(BUILDROOT)/.host/entry
	@echo '  cd $(SOURCEDIR)' >>$(BUILDROOT)/.host/entry
	@echo '  cd debian/$$(dpkg-parsechangelog | sed -n -e '\''s/^Source:[[:space:]]\+//p'\'')' >>$(BUILDROOT)/.host/entry
	@echo 'else' >>$(BUILDROOT)/.host/entry
	@echo '  cd $(SOURCEDIR)/debian/tmp' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'find | sed -e '\''/^\.\/DEBIAN\(\/.*\)\?$$/ d'\'' | sort -u >$(BUILDER_HOME)/.filelist' >>$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'for f in ~/*.deb; do dpkg -c $$f; done | sed -e '\''s,^\([^[:space:]]\+[[:space:]]\+\)\{5\}\./\(.*\)$$,./\2,'\'' -e '\''s/[[:space:]]\+->.*$$//'\'' -e '\''s,/$$,,'\'' -e '\''/^[[:space:]]*$$/ d'\'' | sort -u >~/.filelist.indeb' >>$(BUILDROOT)/.host/entry
	@echo 'if diff .filelist .filelist.indeb | grep "^<"; then' >>$(BUILDROOT)/.host/entry
	@echo '  echo "*** WARNING: There are unpackaged files! ***"' >>$(BUILDROOT)/.host/entry
	@echo '  exit 1' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry


##
## * `repo`    Import the freshly built package into the package
## repository. The internal repository is then synchronized with
## the `repo` directory near the `buildroot` one. The `repo`
## repository accumulates all successful builds: new packages are
## included and the existing ones are updated. This accumulation
## system provides the base for incremental builds. The action is
## callled automatically by the `build` and `rebuild` actions.
##
##     The `OUTNAME=<repo>` parameter can be used to override the
## repository name (and therefore, the name of its directory) given
## at pocket initialization (use `show-config` without parameters to
## get it).
repo: $(BUILDROOT)/.repodone

$(BUILDROOT)/.repodone: $(BUILDROOT)/.buildok
	@echo "$(INFOPFX) Updating the repository accumulator..."
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'cd $(BUILDER_HOME)' >>$(BUILDROOT)/.host/entry
	@echo 'rm -rf $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@echo 'mkdir $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@if [ -e $(BUILDROOT)$(INREPODIR)/conf/distributions ]; then \
	   echo 'cp -a $(INREPODIR)/* $(OUTREPODIR)/' >>$(BUILDROOT)/.host/entry; \
	fi
	@echo 'mkdir -p $(OUTREPODIR)/conf' >>$(BUILDROOT)/.host/entry
	@echo "archs=\"\$$( ( cat *.changes; if [ -e $(OUTREPODIR)/conf/distributions ]; then cat $(OUTREPODIR)/conf/distributions; fi ) | sed -n -e '/^Architectures*:/ { s/^[^[:space:]]\\+[[:space:]]*//; s/[[:space:]]/\\n/g; p }' | sed -e '/^[[:space:]]*\$$/ d' -e \"s/^all\\\$$/\$$(dpkg --print-architecture)/g\" | sort -u | sed -n -e 'H' -e '\$$ { g; s/\\n/ /g; s/^[[:space:]]\\+//; p }')\"" >>$(BUILDROOT)/.host/entry
	@echo "comps=\"\$$( ( cat *.changes | sed -n -e '/^Files:/,\$$ { s/^[[:space:]]\\+[0-9a-f]\\+[[:space:]]\\+[0-9]\\+[[:space:]]\\+\\([^[:space:]]\\+\\)\\(\\/[^[:space:]]\\+\\)\\?[[:space:]].*\$$/\\1/p }'; if [ -e $(OUTREPODIR)/conf/distributions ]; then sed -n -e '/^Components:/ { s/^Components:[[:space:]]*//; s/[[:space:]]\\+/\\n/g; p; q }' $(OUTREPODIR)/conf/distributions; fi ) | sed -e '/^[[:space:]]*\$$/ d' | sort -u | sed -n -e 'H' -e '\$$ { g; s/\\n/ /g; s/^[[:space:]]\\+//; p }')\"" >>$(BUILDROOT)/.host/entry
	@echo "ucomps=\"\$$( ( cat *.changes | sed -n -e '/^Files:/,\$$ { /[[:space:]]debian-installer[[:space:]]/! d; s/^[[:space:]]\\+[0-9a-f]\\+[[:space:]]\\+[0-9]\\+[[:space:]]\\+\\([^[:space:]]\\+\\)\\(\\/[^[:space:]]\\+\\)\\?[[:space:]].*\$$/\\1/p }'; if [ -e $(OUTREPODIR)/conf/distributions ]; then sed -n -e '/^UDebComponents:/ { s/^UDebComponents:[[:space:]]*//; s/[[:space:]]\\+/\\n/g; p; q }' $(OUTREPODIR)/conf/distributions; fi ) | sed -e '/^[[:space:]]*\$$/ d' | sort -u | sed -n -e 'H' -e '\$$ { g; s/\\n/ /g; s/^[[:space:]]\\+//; p }')\"" >>$(BUILDROOT)/.host/entry
	@echo "oldarchs=\"\$$([ ! -e $(OUTREPODIR)/conf/distributions ] || sed -n -e \"/^Architectures:/ { s/^Architectures:[[:space:]]*//; s/[[:space:]]*\$$//; p; q }\" $(OUTREPODIR)/conf/distributions)\"" >>$(BUILDROOT)/.host/entry
	@echo 'cat <<EOF >$(OUTREPODIR)/conf/distributions' >>$(BUILDROOT)/.host/entry
	@echo 'Origin: pocket' >>$(BUILDROOT)/.host/entry
	@echo 'Label: $(OUTNAME)' >>$(BUILDROOT)/.host/entry
	@echo 'Codename: $(OUTNAME)' >>$(BUILDROOT)/.host/entry
	@echo 'Architectures: $$archs' >>$(BUILDROOT)/.host/entry
	@echo 'Components: $$comps' >>$(BUILDROOT)/.host/entry
	@echo 'UDebComponents: $$ucomps' >>$(BUILDROOT)/.host/entry
	@echo 'Description: $(OUTDESC)' >>$(BUILDROOT)/.host/entry
	@echo 'EOF' >>$(BUILDROOT)/.host/entry
	@echo 'archange=0' >>$(BUILDROOT)/.host/entry
	@echo 'if [ "$$archs" != "$$oldarchs" ]; then' >>$(BUILDROOT)/.host/entry
	@echo '  archange=1' >>$(BUILDROOT)/.host/entry
	@echo 'fi' >>$(BUILDROOT)/.host/entry
	@echo 'archs=' >>$(BUILDROOT)/.host/entry
	@echo 'allarch=0' >>$(BUILDROOT)/.host/entry
	@echo 'for f in *.changes; do' >>$(BUILDROOT)/.host/entry
	@echo "  srcname=\"\$$(sed -n -e '/^Source:/ { s/^Source:[[:space:]]*//p; q }' \$$f)\"" >>$(BUILDROOT)/.host/entry
	@echo "  srcver=\"\$$(sed -n -e '/^Version:/ { s/^Version:[[:space:]]*//p; q }' \$$f)\"" >>$(BUILDROOT)/.host/entry
	@echo "  archs=\"\$$(sed -n -e '/^Architecture:/ { s/^Architecture:[[:space:]]*//; s/[[:space:]]*$$//; p; q }' \$$f)\"" >>$(BUILDROOT)/.host/entry
	@echo '  archfilter=' >>$(BUILDROOT)/.host/entry
	@echo '  delarchs=' >>$(BUILDROOT)/.host/entry
	@echo '  delsrc=0' >>$(BUILDROOT)/.host/entry
	@echo '  for a in $$archs; do' >>$(BUILDROOT)/.host/entry
	@echo '    case "$$a" in' >>$(BUILDROOT)/.host/entry
	@echo '      all)' >>$(BUILDROOT)/.host/entry
	@echo '        allarch=1' >>$(BUILDROOT)/.host/entry
	@echo '        ;;' >>$(BUILDROOT)/.host/entry
	@echo '    esac' >>$(BUILDROOT)/.host/entry
	@echo '  done' >>$(BUILDROOT)/.host/entry
	@echo '  for a in $$archs; do' >>$(BUILDROOT)/.host/entry
	@echo '    [ -z "$$archfilter" ] || archfilter="$$archfilter | "' >>$(BUILDROOT)/.host/entry
	@echo '    [ -z "$$delarchs" ] || delarchs="$$delarchs "' >>$(BUILDROOT)/.host/entry
	@echo '    case "$$a" in' >>$(BUILDROOT)/.host/entry
	@echo '      all)' >>$(BUILDROOT)/.host/entry
	@echo '        archfilter="$${archfilter}Architecture (==all)"' >>$(BUILDROOT)/.host/entry
	@echo '        delarchs="$${delarchs}all"' >>$(BUILDROOT)/.host/entry
	@echo '        ;;' >>$(BUILDROOT)/.host/entry
	@echo '      source)' >>$(BUILDROOT)/.host/entry
	@echo '        archfilter=' >>$(BUILDROOT)/.host/entry
	@echo '        delarchs="all and any"' >>$(BUILDROOT)/.host/entry
	@echo '        delsrc=1' >>$(BUILDROOT)/.host/entry
	@echo '        break' >>$(BUILDROOT)/.host/entry
	@echo '        ;;' >>$(BUILDROOT)/.host/entry
	@echo '      *)' >>$(BUILDROOT)/.host/entry
	@echo '        archfilter="$${archfilter}\$$Architecture (==$$a)"' >>$(BUILDROOT)/.host/entry
	@echo '        delarchs="$${delarchs}$$a"' >>$(BUILDROOT)/.host/entry
	@echo '        ;;' >>$(BUILDROOT)/.host/entry
	@echo '    esac' >>$(BUILDROOT)/.host/entry
	@echo '  done' >>$(BUILDROOT)/.host/entry
	@echo '' >>$(BUILDROOT)/.host/entry
	@echo '  echo "Remove $$srcname packages from architectures: $$delarchs"' >>$(BUILDROOT)/.host/entry
	@echo '  reprepro -b $(OUTREPODIR) removefilter $(OUTNAME) "\$$Source (==$$srcname)$${archfilter:+, $$archfilter}"' >>$(BUILDROOT)/.host/entry
	@echo '  if [ $$delsrc -ne 0 ]; then' >>$(BUILDROOT)/.host/entry
	@echo '    echo "Add $$srcname $$srcver source package to \"$(OUTNAME)\" repo..."' >>$(BUILDROOT)/.host/entry
	@echo '    reprepro -b $(OUTREPODIR) --ignore=wrongdistribution includedsc $(OUTNAME) $${f%_*}.dsc' >>$(BUILDROOT)/.host/entry
	@echo '  fi' >>$(BUILDROOT)/.host/entry
	@echo '  echo "Add $$srcname $$srcver binary packages to \"$(OUTNAME)\" repo..."' >>$(BUILDROOT)/.host/entry
	@echo '  reprepro -b $(OUTREPODIR) --ignore=wrongdistribution include $(OUTNAME) $$f' >>$(BUILDROOT)/.host/entry
	@echo 'done' >>$(BUILDROOT)/.host/entry
	@echo 'echo "Flood the repo..."' >>$(BUILDROOT)/.host/entry
	@echo 'reprepro -b $(OUTREPODIR) flood $(OUTNAME)' >>$(BUILDROOT)/.host/entry
	@echo 'chmod -R a+rX $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry
	rm -rf $(BUILDREPO)
	mkdir $(BUILDREPO)
	cp -a $(BUILDROOT)$(OUTREPODIR)/* \
	      $(BUILDREPO)/
	touch $(BUILDREPO)/dists/$(OUTNAME)/Release
	touch $@

##
## * `clean-repo`    Completely remove the `repo` directory.
clean-repo:
	@echo "$(INFOPFX) Deleting the repository accumulator..."
	rm -f $(BUILDROOT)/.repodone
	@if [ -d $(BUILDROOT)$(OUTREPODIR) -a \
              -e $(BUILDROOT)/dev/.stamp -a \
              -e $(BUILDROOT)$(BUSYBOX) ]; \
        then \
	  echo '#!$(BUSYBOX) sh' >$(BUILDROOT)/.host/entry; \
	  echo 'rm -rf $(OUTREPODIR)' >>$(BUILDROOT)/.host/entry; \
	  chmod 0755 $(BUILDROOT)/.host/entry; \
	  $(RUN_B) $(abspath $(BUILDROOT)) /.host/entry; \
	fi
	rm -rfv $(BUILDREPO)
	rm -fv $(BUILDROOT)/.updated

##
## * `build`    Start or continue building the Debian package from
## source and import the result into the `repo` repository.
## Invokes `buildpkg`, then `repo`.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build. See the `show-targets`
## action help for more information.
build: buildpkg repo

##
## * `rebuildpkg`    Rebuild the named package from its source package
## and import the result into the `repo` repository. Invokes `rebuildpkg`,
## then `repo`. The name of the package is accepted via the `PKG=<package>`
## parameter.
##
##     The `TARGET=<arch>` parameter can be used to specify the target
## host architecture in a case of cross-build (see the `show-targets`
## action help for more information). In that case, *only the
## architecture-specific* packages are rebuilt.
rebuild: rebuildpkg repo


##
## * `install-check`    Performs the fresh test installation of the
## package given via the `PKG=<package>` parameter. The package
## is installed in the clean bootstrapped chroot.
install-check:
	$(if $(filter install-check,$(MAKECMDGOALS)),$(if $(PKG),,$(error Specify the package to install using 'PKG=')))
	@echo "$(INFOPFX) Installing package $(PKG) into $(abspath $(INSTALLROOT))"
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		clean
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		update
	@echo '#!/bin/sh -e$(SHOPTS)' >$(INSTALLROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(INSTALLROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(INSTALLROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(PKG)' >>$(INSTALLROOT)/.host/entry
	@chmod 0755 $(INSTALLROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(INSTALLROOT)) $(FAKEROOT) /.host/entry


##
## * `install-repo`    Performs the test installation of the
## current `repo` contents. Use `install-shell` after the
## successfull install to get inside.  The packages are
## installed in the clean bootstrapped chroot.
install-repo: $(INSTALLROOT)/.installrepodone

##
## * `install-clean`    Removes the install (test) chroot completely.
install-clean:
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		clean

##
## * `reinstall-repo`    Make `install-clean` then `install-repo`.
reinstall-repo: install-clean install-repo


$(INSTALLROOT)/.installrepodone: $(BUILDROOT)/.repodone \
$(BUILDREPO)/dists/$(OUTNAME)/Release
	@echo "$(INFOPFX) Installing all built packages into $(abspath $(INSTALLROOT))"
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		clean
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		update
	@echo '#!/bin/sh -e$(SHOPTS)' >$(INSTALLROOT)/.host/entry
	@echo 'dpkg --unpack -R $(INREPODIR)' >>$(INSTALLROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(INSTALLROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(INSTALLROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y -f --no-install-recommends --allow-unauthenticated' >>$(INSTALLROOT)/.host/entry
	@chmod 0755 $(INSTALLROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(INSTALLROOT)) $(FAKEROOT) /.host/entry
	touch $@

$(INSTALLROOT)/.testenv:
	@echo "$(INFOPFX) Installing additional packages: $(strip $(TESTPKGLIST))"
	@echo '#!/bin/sh -e$(SHOPTS)' >$(INSTALLROOT)/.host/entry
	@if [ -n "$$http_proxy" ]; then \
	   echo "export http_proxy='$$http_proxy'" >>$(INSTALLROOT)/.host/entry; \
	   echo "export no_proxy='$$no_proxy'" >>$(INSTALLROOT)/.host/entry; \
	 fi
	@echo 'apt-get install -y --no-install-recommends --allow-unauthenticated $(strip $(TESTPKGLIST))' >>$(INSTALLROOT)/.host/entry
	@chmod 0755 $(INSTALLROOT)/.host/entry
	share_network=yes $(RUN_A) $(abspath $(INSTALLROOT)) $(FAKEROOT) /.host/entry
	touch $@

##
## * `install-shell`    Invoke the command shell inside the install
## (test) chroot. The optional parameter `ROLE=rooter` can be used to
## obtain root privileges. To get network access pass `SHARE_NETWORK=yes`.
install-shell: $(INSTALLROOT)/.testenv
	$(MAKE) -f $(firstword $(MAKEFILE_LIST)) \
		BUILDROOT=$(INSTALLROOT) \
		shell

##
## * `show-targets`    List the available cross-build targets.
show-targets: $(BUILDROOT)/.cross
	@echo '#!/bin/sh -e$(SHOPTS)' >$(BUILDROOT)/.host/entry
	@echo 'apt-cache search "^crossbuild-essential-" | sed -e "s/^crossbuild-essential-\([^[:space:]]\+\)[[:space:]].*$$/\1/"' >>$(BUILDROOT)/.host/entry
	@chmod 0755 $(BUILDROOT)/.host/entry
	$(RUN_B) $(abspath $(BUILDROOT)) /.host/entry

##
## * `show-config`    Show the current Pocketfile configuration.
show-config:
	@echo 'Flavour: $(POCKET_FLAVOUR)'
	@echo 'Version: $(POCKET_VERSION)'
	@echo 'Distro: $(REPO):$(DISTRO)'
	@echo 'Mirror: $($(REPO)_MIRROR)'
	@echo 'Components: $(DISTCOMPS)'
	$(if $(OVERLAYS),@echo 'Overlays: $(OVERLAYS)')
	@echo 'Architecture: $(if $(ARCH),$(ARCH),$(shell dpkg --print-architecture))'
	@echo 'System variant: $(VARIANT)'
	@echo 'System package list: $(SYSPKGLIST)'
	@echo 'Exclude package list: $(NOSYSPKGLIST)'
	@echo 'Downloaded system tarball: $(abspath $(BUILDROOTTAR))'
	@echo 'Build package list: $(BUILDPKGLIST)'
	@echo 'Test package list: $(TESTPKGLIST)'
	@echo 'Build root: $(abspath $(BUILDROOT))'
	@echo 'Install root: $(abspath $(INSTALLROOT))'
	@echo 'Repository "$(OUTNAME)": $(abspath $(BUILDREPO))'


# Documentation processing
# ------------------------

SUBJFILTER = sed -n -e '/^\*[[:space:]]\+\`$(SUBJ)\`/,/^\*[[:space:]]\+\`/ { /^\*[[:space:]]\+\`/ { /^\*[[:space:]]\+\`$(SUBJ)\`/! { q 0 } }; p; $$ { q 0 }; }' -e '$$ q 1'
FILTER = $(if $(SUBJ),$(SUBJFILTER))

docextract:
	@echo
	@sed -n -e '$$ { x; s/^\n//; s/\n/ /g; p }' \
               -e '/^##/! d' \
               -e 's/^##//' \
               -e 's/^ //' \
               -e '/^===/ { x; s/^\n//; s/\n/ /g; p; d }' \
               -e '/^---/ { x; s/^\n//; s/\n/ /g; p; d }' \
               -e '/^$$/ { x; s/^\n//; s/\n/ /g; p; x; p; x; d }' \
               -e 'H' \
	       $(firstword $(MAKEFILE_LIST))

##
## * `help`    Show the brief help information.
help:
	@echo
	@$(MAKE) --no-print-directory -s -f $(firstword $(MAKEFILE_LIST)) docextract | \
	sed -n -e '/^[[:space:]]*\*[[:space:]]\+`/ s/\..*$$/.\n/p' | \
	fmt -w $$(tput cols) | \
	sed -e 's/ \(===\+\)$$/\n\1/' \
	    -e 's/ \(---\+\)$$/\n\1/' | \
	$(if $(FILTER),eval "$(FILTER)",cat)
	@echo

##
## * `doc`    Show the detailed help information (use `SUBJ=<action>` to
## see the description for the particular action).
doc:
	@echo
	@$(MAKE) --no-print-directory -s -f $(firstword $(MAKEFILE_LIST)) docextract | \
	fmt -w $$(tput cols) | \
	sed -e 's/ \(===\+\)$$/\n\1/' \
	    -e 's/ \(---\+\)$$/\n\1/' | \
	$(if $(FILTER),eval "$(FILTER)",less)
	@echo


.PHONY: bootstrap download extract clean clean-cache update install install-buildenv shell sync-in sync-out install-builddeps buildpkg build rebuildpkg rebuild cleanpkg clean-repo repo install-repo reinstall-repo install-clean install-shell help doc docextract show-targets show-config default

##
## Examples
## --------
##
## The examples below show the `pocket` command. However, it is
## possible to run them via `make -C <pocketdir> -f Pocketfile`
## too.
##
## ### Bootstrapping the chroot
##
## In order to bootstrap the pocket chroot you have to have the
## Internet access to the corresponding system repository (use
## `pocket show-confi` to konow the URL) or a pre-downloaded tarball
## of packages (you get it along with a successful network bootstrap):
##
##     pocket bootstrap
##
## If there is no tarball, it starts with downloading the packages and
## then installs them into the chroot (`buildroot`, to be more
## precise). On success, you get the `~/pocket/buildroot` directory
## with a fresh minimal system and the tarball with all packages it
## consists of. If for some reason you want to download the tarball
## first invoke `pocket download` and then `pocket bootstrap`
## (probably on other computer) to extract and install the packages.
